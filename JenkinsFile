
pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "MAVEN"
        jdk "JDK"
        gradle "gradle"
        dockerTool "docker"
    }
    environment{
        CHECK_URL = "http://192.168.56.101:8080/"
        CMD = "curl --write-out %{http_code} --silent --output /dev/null ${CHECK_URL}"
             }
    stages {
        stage('Clone and initial docker file'){
            steps {
                    git branch: 'main', url: 'https://github.com/tuanngociuit98/spring-petclinic'
                    withMaven() {
                    sh """mvn install -Dcheckstyle.skip
                          mvn -N wrapper:wrapper -Dmaven=3.5.2    
                          ./mvnw package -Dcheckstyle.skip """ 
                                      }}}
      stage('Docker build website images'){
          steps{
              sh 'docker build -t spring-petclinic .'
              sh 'docker login -u admin -p vm31234 http://192.168.56.106:9001/repository/docker-host/'
          }
      }
      stage('Push image to Nexus repository'){
          steps{
                  sh'docker tag spring-petclinic:latest 192.168.56.106:9001/docker-hosted/spring-petclinic'
                  sh'docker push 192.168.56.106:9001/docker-hosted/spring-petclinic'
              
          }
      }
      stage('Clean ReleaseVM'){
          steps{
             script{
                        sshagent(['ssh-remote-to-vm2']) {
                            sshagent(['ssh-remote-to-vm2']) {
                            imageExists = sh(script: 'ssh vm2@192.168.56.101 "docker images -q spring-petclinic"', returnStdout: true) ==0
                            if( imageExists == false){
                                 sh 'ssh vm2@192.168.56.101 "docker kill $(ssh vm2@192.168.56.101 "docker ps -q") "'
                                sh 'ssh vm2@192.168.56.101 "docker rm $(ssh vm2@192.168.56.101 "docker ps -a -q") "'
                                sh 'ssh vm2@192.168.56.101 "docker rmi $(ssh vm2@192.168.56.101 "docker images -q") "'
                            }
                        }
                        }
             }
          }
      }
        stage('Pull image from Nexus repository to ReleaseVM'){
        steps{
                 sshagent(['ssh-remote-to-vm2']) {
                            sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 docker login -u admin -p vm31234 http://192.168.56.106:9001/repository/docker-host/'
                            sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 docker pull 192.168.56.106:9001/docker-hosted/spring-petclinic'
                            sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 docker tag 192.168.56.106:9001/docker-hosted/spring-petclinic spring-petclinic'
                            sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 sudo docker rmi 192.168.56.106:9001/docker-hosted/spring-petclinic:latest'
                        }
              }}
              stage('Deploy image in ReleaseVM'){
                  steps{
                      timeout(activity: true, time: 60, unit: 'SECONDS') {
                        sshagent(['ssh-remote-to-vm2']) {
                            sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 docker run -d --name spring-petclinic -p 8080:8080 $( docker images spring-petclinic:latest -q)'
                        }
}
                  }
              }
                stage("Check health pipeline "){
                steps{
                  script {
                    sh "${CMD} > commandResult"
                    env.status = readFile('commandResult').trim()
                    sh "echo ${env.status}"
                    if (env.status == '200') {
                        sh "echo web run successfull"
                }
                    else {
                        timeout(activity: true, time: 200, unit: 'SECONDS') {
               sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 sh pull-dockerimage.sh'
               sh 'ssh -o StrictHostKeyChecking=no -l vm2 192.168.56.101 sh run-website.sh'
}
                    }
                }
                }
                }
    }
    
}

